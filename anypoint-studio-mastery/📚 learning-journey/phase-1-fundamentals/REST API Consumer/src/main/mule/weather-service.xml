<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Weather Service Flow -->
    <flow name="weather-service-flow" doc:name="weather-service-flow">
        <http:listener doc:name="Weather API Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/weather/{city}"/>
        
        <set-variable variableName="city" value="#[attributes.uriParams.city]" doc:name="Extract City"/>
        <set-variable variableName="enableMockMode" value="${app.enableMockMode}" doc:name="Set Mock Mode"/>
        
        <logger level="INFO" doc:name="Log Request" 
                message="Weather request for city: #[vars.city], Mock Mode: #[vars.enableMockMode]"/>
        
        <choice doc:name="Mock or Real API">
            <when expression="#[vars.enableMockMode == true]">
                <flow-ref doc:name="Mock Weather Response" name="mock-weather-response"/>
            </when>
            <otherwise>
                <flow-ref doc:name="Real Weather API" name="real-weather-api"/>
            </otherwise>
        </choice>
        
        <ee:transform doc:name="Transform Weather Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "success",
    service: "weather",
    city: vars.city,
    timestamp: now(),
    data: {
        temperature: {
            current: payload.main.temp,
            feelsLike: payload.main.feels_like,
            min: payload.main.temp_min,
            max: payload.main.temp_max,
            unit: "celsius"
        },
        weather: {
            main: payload.weather[0].main,
            description: payload.weather[0].description,
            icon: payload.weather[0].icon
        },
        atmosphere: {
            pressure: payload.main.pressure,
            humidity: payload.main.humidity
        },
        wind: {
            speed: payload.wind.speed default 0,
            direction: payload.wind.deg default 0
        },
        location: {
            name: payload.name,
            country: payload.sys.country
        }
    },
    mockMode: vars.enableMockMode
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <logger level="INFO" doc:name="Log Success" 
                message="Weather data retrieved successfully for: #[vars.city]"/>
        
        <error-handler>
            <on-error-continue enableNotifications="true" logException="true" type="ANY">
                <ee:transform doc:name="Weather Error Response">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "error",
    service: "weather", 
    city: vars.city,
    timestamp: now(),
    error: {
        message: "Failed to retrieve weather data",
        details: error.description default "Unknown error",
        code: "WEATHER_SERVICE_ERROR"
    }
}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">500</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-continue>
        </error-handler>
    </flow>

    <!-- Real Weather API Sub-flow -->
    <sub-flow name="real-weather-api" doc:name="real-weather-api">
        <http:request method="GET" doc:name="OpenWeather API Request" 
                     config-ref="OpenWeather_HTTP_Request_Config" 
                     path="${apis.openweather.basePath}/weather"
                     responseTimeout="${apis.openweather.timeout}">
            <http:query-params><![CDATA[#[{
                q: vars.city,
                appid: p('secure::openweather.api.key'),
                units: 'metric'
            }]]]></http:query-params>
        </http:request>
    </sub-flow>

    <!-- Mock Weather Response Sub-flow -->
    <sub-flow name="mock-weather-response" doc:name="mock-weather-response">
        <set-payload value='#[readUrl("classpath://mock-data/weather-mock.json", "application/json")]' 
                    doc:name="Load Mock Weather Data"/>
        <ee:transform doc:name="Customize Mock Data">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload ++ {
    name: vars.city
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

</mule>