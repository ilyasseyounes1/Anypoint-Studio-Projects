<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Health Check Flow -->
    <flow name="health-check-flow" doc:name="health-check-flow">
        <http:listener doc:name="Health Check Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/health"/>
        
        <ee:transform doc:name="Health Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "healthy",
    application: {
        name: p('app.name'),
        version: p('app.version'),
        mode: if(p('app.enableMockMode') == "true") "mock" else "live"
    },
    services: {
        weather: "available",
        news: "available", 
        users: "available",
        dashboard: "available",
        batch: "available"
    },
    timestamp: now(),
    uptime: "unknown"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <logger level="INFO" doc:name="Log Health Check" message="Health check requested"/>
    </flow>

    <!-- API Documentation Flow -->
    <flow name="api-docs-flow" doc:name="api-docs-flow">
        <http:listener doc:name="API Docs Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/api/docs"/>
        
        <ee:transform doc:name="API Documentation">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    title: "Weather & News Aggregator API",
    version: p('app.version'),
    description: "REST API Consumer aggregating weather, news, and user data from multiple external services",
    baseUrl: "http://localhost:" ++ p('http.listener.port'),
    mockMode: p('app.enableMockMode') == "true",
    endpoints: {
        weather: {
            path: "/weather/{city}",
            method: "GET",
            description: "Get weather information for a specific city",
            example: "GET /weather/london"
        },
        news: {
            path: "/news/{category}", 
            method: "GET",
            description: "Get news articles by category",
            categories: ["business", "entertainment", "general", "health", "science", "sports", "technology"],
            example: "GET /news/technology"
        },
        users: {
            path: "/users/{id}",
            method: "GET", 
            description: "Get user profile information",
            example: "GET /users/1"
        },
        dashboard: {
            path: "/dashboard/{city}/{category}",
            method: "GET",
            description: "Get combined weather and news dashboard",
            example: "GET /dashboard/london/technology"
        },
        batch: {
            path: "/weather/batch",
            method: "POST",
            description: "Process weather data for multiple cities",
            requestBody: {
                cities: ["london", "paris", "tokyo"]
            }
        },
        health: {
            path: "/health",
            method: "GET",
            description: "Application health check"
        }
    },
    timestamp: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    <!-- Root Redirect Flow -->
    <flow name="root-redirect-flow" doc:name="root-redirect-flow">
        <http:listener doc:name="Root Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/"/>
        
        <ee:transform doc:name="Welcome Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    message: "Welcome to Weather & News Aggregator API",
    version: p('app.version'),
    documentation: "/api/docs",
    health: "/health",
    mockMode: p('app.enableMockMode') == "true",
    availableEndpoints: [
        "/weather/{city}",
        "/news/{category}",  
        "/users/{id}",
        "/dashboard/{city}/{category}",
        "/weather/batch"
    ],
    timestamp: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

</mule><?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Health Check Flow -->
    <flow name="health-check-flow" doc:name="health-check-flow">
        <http:listener doc:name="Health Check Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/health"/>
        
        <ee:transform doc:name="Health Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "healthy",
    application: {
        name: p('app.name'),
        version: p('app.version'),
        mode: if(p('app.enableMockMode') == "true") "mock" else "live"
    },
    services: {
        weather: "available",
        news: "available", 
        users: "available",
        dashboard: "available",
        batch: "available"
    },
    timestamp: now(),
    uptime: "unknown"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <logger level="INFO" doc:name="Log Health Check" message="Health check requested"/>
    </flow>

    <!-- API Documentation Flow -->
    <flow name="api-docs-flow" doc:name="api-docs-flow">
        <http:listener doc:name="API Docs Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/api/docs"/>
        
        <ee:transform doc:name="API Documentation">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    title: "Weather & News Aggregator API",
    version: p('app.version'),
    description: "REST API Consumer aggregating weather, news, and user data from multiple external services",
    baseUrl: "http://localhost:" ++ p('http.listener.port'),
    mockMode: p('app.enableMockMode') == "true",
    endpoints: {
        weather: {
            path: "/weather/{city}",
            method: "GET",
            description: "Get weather information for a specific city",
            example: "GET /weather/london"
        },
        news: {
            path: "/news/{category}", 
            method: "GET",
            description: "Get news articles by category",
            categories: ["business", "entertainment", "general", "health", "science", "sports", "technology"],
            example: "GET /news/technology"
        },
        users: {
            path: "/users/{id}",
            method: "GET", 
            description: "Get user profile information",
            example: "GET /users/1"
        },
        dashboard: {
            path: "/dashboard/{city}/{category}",
            method: "GET",
            description: "Get combined weather and news dashboard",
            example: "GET /dashboard/london/technology"
        },
        batch: {
            path: "/weather/batch",
            method: "POST",
            description: "Process weather data for multiple cities",
            requestBody: {
                cities: ["london", "paris", "tokyo"]
            }
        },
        health: {
            path: "/health",
            method: "GET",
            description: "Application health check"
        }
    },
    timestamp: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    <!-- Root Redirect Flow -->
    <flow name="root-redirect-flow" doc:name="root-redirect-flow">
        <http:listener doc:name="Root Listener" 
                      config-ref="HTTP_Listener_Configuration" 
                      path="/"/>
        
        <ee:transform doc:name="Welcome Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    message: "Welcome to Weather & News Aggregator API",
    version: p('app.version'),
    documentation: "/api/docs",
    health: "/health",
    mockMode: p('app.enableMockMode') == "true",
    availableEndpoints: [
        "/weather/{city}",
        "/news/{category}",  
        "/users/{id}",
        "/dashboard/{city}/{category}",
        "/weather/batch"
    ],
    timestamp: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

</mule>